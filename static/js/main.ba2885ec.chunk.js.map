{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","completeTodo","todos","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAsDeA,MApDf,SAAkBC,GACd,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAnE,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAACC,GAClBP,EAASO,EAAEC,OAAOV,QAYtB,OACI,sBAAMW,UAAU,YAAYC,SAVX,SAACH,GAClBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACXE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAEVC,EAAS,KAGT,SACML,EAAME,KAAS,qCAAE,uBACfoB,KAAK,OACLC,YAAY,aACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,kBACVW,SAAUd,EACVe,IAAKpB,IAET,wBAAQQ,UAAU,mBAAlB,oBATiB,OAWf,qCAAE,uBACAQ,KAAK,OACLC,YAAY,aACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,aACVW,SAAUd,EACVe,IAAKpB,IAET,wBAAQQ,UAAU,cAAlB,4B,eCHGa,MAtCf,YAAgE,IAAhDC,EAA+C,EAA/CA,aAAcC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAC7C,EAAwB9B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAFX,mBAAOD,EAAP,KAAa8B,EAAb,KAYA,OAAG9B,EAAKe,GACG,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SARZ,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAId,GAChB6B,EAAQ,CACJf,GAAI,KACJd,MAAO,QAMZ0B,EAAMI,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKrB,UAAWoB,EAAKE,WAAa,oBAAsB,WAAxD,UACI,qBAEIC,QAAS,WAAQT,EAAaM,EAAKjB,KAFvC,SAIKiB,EAAKb,MAHDa,EAAKjB,IAKd,sBAAKH,UAAU,OAAf,UACI,cAAC,IAAD,CACIuB,QAAS,WAAQP,EAAWI,EAAKjB,KACjCH,UAAU,gBAEd,cAAC,IAAD,CACIuB,QAAS,WAAQL,EAAQ,CAAEf,GAAIiB,EAAKjB,GAAId,MAAO+B,EAAKb,QACpDP,UAAU,mBAdmDqB,OC2BlEG,MA9Cf,WACI,MAA0BrC,mBAAS,IAAnC,mBAAO4B,EAAP,KAAcU,EAAd,KAgCA,OACI,gCACI,4DACA,cAAC,EAAD,CAAUxB,SAjCF,SAAAmB,GACZ,GAAIA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKb,MAAnC,CAGA,IAAMoB,EAAQ,CAAIP,GAAJ,mBAAaL,IAC3BU,EAASE,OA6BL,cAAC,EAAD,CAAMZ,MAAOA,EACTD,aAdS,SAACX,GAClB,IAAIyB,EAAeb,EAAMI,KAAI,SAAAC,GAIzB,OAHGA,EAAKjB,KAAOA,IACXiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAQDZ,WApBO,SAAAb,GACf,IAAM0B,EAAY,YAAId,GAAOe,QAAO,SAAAV,GAAI,OAAIA,EAAKjB,KAAOA,KAExDsB,EAASI,IAkBDZ,WA7BO,SAACc,EAAQC,GACpBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAG3CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAK/B,KAAO4B,EAASC,EAAWE,eCP5DC,MARf,WACE,OACE,qBAAKnC,UAAU,WAAf,SACC,cAAC,EAAD,OCFLoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ba2885ec.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nfunction TodoForm(props) {\n    const [input, setInput] = useState(props.edit ? props.edit.value : '')\n\n    const inputRef = useRef(null)\n\n    useEffect(()=>{\n        inputRef.current.focus()\n    })\n\n    const handleChange = (e) => {\n        setInput(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        props.onSubmit({\n            id: Math.floor(Math.random() * 10000),\n            text: input\n        })\n        setInput('')\n    }\n    return (\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\n            { props.edit ? ( <><input \n                type=\"text\"\n                placeholder=\"Add a Todo\" \n                value={input} \n                name=\"text\" \n                className=\"todo-input edit\"\n                onChange={handleChange}\n                ref={inputRef}\n            />\n            <button className=\"todo-button edit\">Update</button> </> ) :\n\n            ( <><input \n                type=\"text\"\n                placeholder=\"Add a Todo\" \n                value={input} \n                name=\"text\" \n                className=\"todo-input\"\n                onChange={handleChange}\n                ref={inputRef}\n            />\n            <button className=\"todo-button\">Add todo</button></> )\n            }\n\n\n        </form>\n    )\n}\n\nexport default TodoForm\n","import React, { useState } from 'react'\nimport TodoForm from './TodoForm'\nimport TodoList from './TodoList'\nimport { RiCloseCircleLine } from 'react-icons/ri'\nimport { TiEdit } from 'react-icons/ti'\nfunction Todo({ completeTodo, todos, removeTodo, updateTodo }) {\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    })\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value)\n            setEdit({\n                id: null,\n                value: ''\n            })\n    }\n    if(edit.id){\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\n    }\n    return todos.map((todo, index) => (\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} key={index}>\n            <div\n                key={todo.id}\n                onClick={() => { completeTodo(todo.id) }}\n            >\n                {todo.text}\n            </div>\n            <div className=\"icon\">\n                <RiCloseCircleLine\n                    onClick={() => { removeTodo(todo.id) }}\n                    className='delete-icon'\n                />\n                <TiEdit\n                    onClick={() => { setEdit({ id: todo.id, value: todo.text }) }}\n                    className='edit-icon'\n                />\n            </div>\n        </div>\n    ))\n}\n\nexport default Todo\n","import React, {useState} from 'react'\nimport Todo from './Todo'\nimport TodoForm from './TodoForm'\nfunction TodoList() {\n    const [todos, setTodos] = useState([])\n\n    const addTodo = todo =>{\n        if(!todo.text || /^\\s*$/.test(todo.text)){\n            return\n        }\n        const newTodos = [todo, ...todos]\n        setTodos(newTodos)\n    }\n\n    const updateTodo = (todoId, newValue) =>{\n        if(!newValue.text || /^\\s*$/.test(newValue.text)){\n            return\n        }\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\n    }\n\n\n    const removeTodo = id =>{\n        const removeArr = [...todos].filter(todo => todo.id !== id)\n\n        setTodos(removeArr)\n    }\n    const completeTodo = (id) =>{\n        let updatedTodos = todos.map(todo =>{\n            if(todo.id === id){\n                todo.isComplete = !todo.isComplete\n            }\n            return todo\n        })\n        setTodos(updatedTodos)\n    }\n    return (\n        <div>\n            <h1>What's the plan for today?</h1>\n            <TodoForm onSubmit={addTodo}/>\n            <Todo todos={todos} \n                completeTodo={completeTodo} \n                removeTodo={removeTodo}\n                updateTodo={updateTodo}\n                />\n        </div>\n    )\n}\n\nexport default TodoList\n","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n     <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}